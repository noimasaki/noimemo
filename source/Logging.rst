ログ出力方式ベストプラクティス
################################

ログ出力方式のベストプラクティスを整理する。

前提条件
============================
私の業務環境として「AWSで検証・開発を実施したうえでオンプレミスに移行する」といった開発スタイルが比較的よく行われている。
よって、今回のログ出力方式の検討を行うにあたって、以下の前提条件を設定する。

- AWSを利用したマイクロサービスアーキテクチャであること
- コンテナベースであること
- クラウド基盤→オンプレミスへの移植性も考慮した構成とすること

また、ログ処理フローのうち、下記の部分に着目する。

.. image:: ./_static/Logging/LoggingFlow.drawio.svg

`[Black Belt Online Seminar] AWS上でのログ管理 <https://www.slideshare.net/AmazonWebServicesJapan/black-belt-online-seminar-aws-69708255>`_



Why：なぜログが必要なのか？
============================

「ログは実行中のアプリケーションの挙動を可視化する」

[12factor](https://12factor.net/ja/logs)の冒頭文がログ出力としての目的の一つを端的に示している。
システム開発時には開発者はこのログをイベントストリームとしてターミナルのフォアグラウンドで見ることで、システムの挙動を確認する。

サービス提供中においても、長期にわたってシステムの挙動を確認することができる。
- 過去の特定のイベントを見つける
- 大きなスケールの傾向をグラフ化する。（1分あたりのリクエスト数など）
- ユーザー定義のヒューリスティクスに基づいて素早くアラートを出す。（1分あたりのエラー数がある閾値を超えた場合にアラートを出すなど）

How：どうやってログを集めるか？
=================================

Dockerのログ出力の仕組み
-------------------------

`ロギングドライバー <https://docs.docker.com/config/containers/logging/configure/#supported-logging-drivers>`_

ECSのログ出力の仕組み
-------------------------


What：何のログを集めるか？
===================================


